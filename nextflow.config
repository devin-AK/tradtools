// Default options
manifest.defaultBranch = 'main'
params.results = "${launchDir}/results"
params.reports = "${params.results}/reports"


// Test parameters
params.R1         = 'https://github.com/devin-AK/small_data/raw/main/tradtools/example_data/raw_subsample_R1.fastq.gz'
params.R2         = 'https://github.com/devin-AK/small_data/raw/main/tradtools/example_data/raw_subsample_R2.fastq.gz'
params.genome1    = 'https://github.com/devin-AK/small_data/raw/main/tradtools/example_data/hg19_chr1.fa.gz'
params.genome2    = 'https://github.com/devin-AK/small_data/raw/main/tradtools/example_data/lambda.fa.gz'
params.blacklist1 = 'https://github.com/devin-AK/small_data/raw/main/tradtools/example_data/hg19-blacklist.v2.bed.gz'
params.blacklist2 = null
params.adapters   = 'https://github.com/devin-AK/small_data/raw/main/tradtools/example_data/adapters.fa'
params.results    = "$launchDir/results"


// Enable reporting
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
report.enabled   = true
report.file      = "${params.reports}/report_${trace_timestamp}.html"
timeline.enabled = true
timeline.file    = "${params.reports}/timeline_${trace_timestamp}.html"
dag.enabled      = true
dag.file         = "${params.reports}/pipeline_dag_${trace_timestamp}.html"


// Singularity
singularity.enabled = true
singularity.autoMounts = true
process.container = "library://devin_ak/default/tradtools:0.1.0"
// prevent user R libraries from being mounted in container and interfering 
process.containerOptions = "--no-home"


// Default number of cpus per task
// The following section determines how the local executor allocates cpus to each task
availCpus = Runtime.runtime.availableProcessors()
if ( availCpus > 1 ) {
  if ( availCpus > 17 ) {
    process.cpus = 16
  } else {
    process.cpus = availCpus - 1
  }
} else {
  process.cpus = 1
}

process {
  withName: SIGNAL_TRACK {
    cpus = 1
  }
  withName: SPLIT_BY_SPECIES {
    cpus = 1
  }
}


// Profiles
profiles {

    local {
        process.executor = 'local'
        process.cpus     = 1
    } 

    sherlock {
        process.executor = 'slurm'
        // process.clusterOptions = '-p owners'
        process.cpus = 8
        process.memory = { 20.GB * task.attempt }
        process.time = { 1.h * task.attempt }
        process.errorStrategy = { task.exitStatus in [1,130,143,137,104,134,139] ? 'retry' : 'finish' }
        process.maxRetries = 3
    } 

}